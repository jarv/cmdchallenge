---

image: "${CI_REGISTRY_IMAGE}/ci:latest"

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID               # Execute jobs in merge request context
    - if: $CI_COMMIT_BRANCH == 'master'      # Execute jobs when a new commit is pushed to master branch

stages:
  - test
  - deploy

#### IMAGE

.image:
  stage: test
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
  services:
    - docker:19.03.5-dind
  before_script:
    - 'echo Running: docker login --password-stdin -u $CI_REGISTRY_USER $CI_REGISTRY'
    - 'echo ${CI_JOB_TOKEN} | docker login --password-stdin -u $CI_REGISTRY_USER $CI_REGISTRY'

image:ci:manual:
  image: docker:19.03.8
  extends: .image
  when: manual
  script:
    - 'apk add make git'
    - make push-image-ci

image:cmd:
  extends: .image
  script:
    - make push-image-cmd

#### TEST

python-black:
  stage: test
  script:
    - apk add file
    - 'find bin cmdchallenge -print -exec file {} \; | grep "Python" | grep -v ".nim" | cut -d: -f1 | xargs black --check'
  rules:
    - if: $CI_COMMIT_BRANCH != 'master'

lint:
  stage: test
  script:
    - yamllint --strict *.yaml
    # - flake8
  rules:
    - if: $CI_COMMIT_BRANCH != 'master'

test:image:
  stage: test
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:19.03.5-dind
  script:
    - make

######################
# DEPLOY
######################

.deploy:tf:
  before_script:
    - export TF_VAR_GCP_CRED_JSON_FNAME="$GCP_CRED_JSON_FNAME"
    - export TF_VAR_CA_PEM_FNAME="$CA_PEM_FNAME"
    - export TF_VAR_SSH_PUBLIC_KEY="$SSH_PUBLIC_KEY"
    - export TF_VAR_SSH_PRIVATE_KEY="$SSH_PRIVATE_KEY"
    - pushd terraform
    - terraform init
    - terraform workspace list

deploy:testing:tf:
  extends: .deploy:tf
  stage: deploy
  variables:
    TF_WORKSPACE: testing
  resource_group: testing:tf
  script:
    - terraform apply -auto-approve

deploy:testing:static:
  stage: deploy
  script:
    - make publish_testing
  resource_group: testing:static

deploy:prod:plan:
  extends: .deploy:tf
  stage: deploy
  variables:
    TF_WORKSPACE: prod
  script:
    - terraform plan

deploy:prod:tf:
  extends: .deploy:tf
  stage: deploy
  variables:
    TF_WORKSPACE: prod
  resource_group: prod:tf
  when: manual
  script:
    - terraform apply -auto-approve
    - make sentry_release_python

deploy:prod:static:
  stage: deploy
  script:
    - make publish_prod
    - make sentry_release_javascript
  resource_group: prod:static
  when: manual
