---

image: "${CI_REGISTRY_IMAGE}/ci-image:latest"

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID               # Execute jobs in merge request context
    - if: $CI_COMMIT_BRANCH == 'master'      # Execute jobs when a new commit is pushed to master branch

stages:
  - image
  - test
  - release
  - deploy

#### IMAGE

.image:
  stage: image
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
  services:
    - docker:19.03.5-dind
  before_script:
    - 'echo Running: docker login --password-stdin -u $CI_REGISTRY_USER $CI_REGISTRY'
    - 'echo ${CI_JOB_TOKEN} | docker login --password-stdin -u $CI_REGISTRY_USER $CI_REGISTRY'

image:ci:manual:
  image: docker:19.03.8
  extends: .image
  allow_failure: true
  when: manual
  script:
    - 'apk add make git'
    - make push-image-ci

image:cmd:manual:
  extends: .image
  allow_failure: true
  when: manual
  script:
    - make push-image-cmd

#### TEST

python-black:
  stage: test
  script:
    - apk add file
    - 'find bin cmdchallenge -print -exec file {} \; | grep "Python" | cut -d: -f1 | xargs black --check'
  rules:
    - if: $CI_COMMIT_BRANCH != 'master'

lint:
  stage: test
  script:
    - yamllint --strict *.yaml
    # - flake8
  rules:
    - if: $CI_COMMIT_BRANCH != 'master'

shellcheck:
  image:
    name: nlknguyen/alpine-shellcheck
    entrypoint: ["/bin/sh", "-c"]
  stage: test
  script:
    - find cmdchallenge/ro_volume/cmdtests/ cmdchallenge/ro_volume/randomizers/ -type f | xargs -r shellcheck -e SC1090,SC1091

shfmt:
  image:
    name: nlknguyen/alpine-shellcheck
    entrypoint: ["/bin/sh", "-c"]
  stage: test
  script:
    - find cmdchallenge/ro_volume/cmdtests/ cmdchallenge/ro_volume/randomizers/ -type f | xargs -r shellcheck -e SC1090,SC1091

test:unit:
  stage: test
  script:
    - make test-runcmd
  rules:
    - if: $CI_COMMIT_BRANCH != 'master'

test:image:
  stage: test
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:19.03.5-dind
  script:
    - make

######################
# Publish
######################

publish:
  image: node:10
  stage: release
  before_script:
    - npm install -g semantic-release @semantic-release/gitlab
  script:
    - semantic-release
  rules:
    - if: $CI_COMMIT_TAG

######################
# DEPLOY
######################

deploy:
  stage: test
  script:
    - export TF_VAR_GCP_CRED_JSON_FNAME="$GCP_CRED_JSON_FNAME"
    - export TF_VAR_CA_PEM_FNAME="$CA_PEM_FNAME"
    - ./bin/create-ssh-keys
    - ./bin/create-client-keys
    - pushd terraform
    - /usr/local/bin/terraform init
    - /usr/local/bin/terraform workspace list
    - /usr/local/bin/terraform workspace select testing
    - popd
    - ./bin/tf-refresh
  when: manual
