[{"version": 4, "description": "Print \"hello world\".\nHint: There are many ways to print text on\nthe command line, one way is with the 'echo'\ncommand.\n\nTry it below and good luck!\n", "author": "cmdchallenge", "expected_output": {"lines": ["hello world"]}, "slug": "hello_world", "example": "echo 'hello world'"}, {"version": 4, "description": "Print the current working directory.\n", "author": "cmdchallenge", "expected_output": {"lines": ["/var/challenges/current_working_directory"]}, "slug": "current_working_directory", "example": "pwd"}, {"version": 5, "description": "List names of all the files in the current\ndirectory, one file per line.\n", "author": "cmdchallenge", "example_fail": "echo README", "expected_output": {"lines": ["README"]}, "slug": "list_files", "example": "ls"}, {"version": 4, "description": "There is a file named \"access.log\" in the\ncurrent directory. Print the contents.\n", "author": "cmdchallenge", "expected_output": {"lines": ["163.56.115.58 - - [09/Jan/2017:22:29:57 +0100] \"GET /posts/2/display HTTP/1.0\" 200 3240", "75.113.188.234 - - [09/Jan/2017:22:30:43 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 1116", "69.16.40.148 - - [09/Jan/2017:22:34:33 +0100] \"GET /pages/create HTTP/1.0\" 500 3471", "225.219.54.140 - - [09/Jan/2017:22:35:30 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 500 2477", "207.243.19.2 - - [09/Jan/2017:22:38:03 +0100] \"GET /bar/create HTTP/1.0\" 200 1116", "199.37.62.156 - - [09/Jan/2017:22:42:18 +0100] \"GET /posts/1/display HTTP/1.0\" 200 2477", "55.74.240.123 - - [09/Jan/2017:22:44:25 +0100] \"POST /posts/1/display HTTP/1.0\" 200 3471", "251.111.109.143 - - [09/Jan/2017:22:49:02 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 2477", "101.163.230.250 - - [09/Jan/2017:22:52:31 +0100] \"DELETE /posts/2/display HTTP/1.0\" 404 2477", "200.19.168.148 - - [09/Jan/2017:22:57:11 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 3471"]}, "slug": "print_file_contents", "example": "cat access.log"}, {"version": 4, "example": "tail -n 5 access.log", "description": "Print the last 5 lines of \"access.log\".\n", "author": "cmdchallenge", "expected_output": {"lines": ["199.37.62.156 - - [09/Jan/2017:22:42:18 +0100] \"GET /posts/1/display HTTP/1.0\" 200 2477", "55.74.240.123 - - [09/Jan/2017:22:44:25 +0100] \"POST /posts/1/display HTTP/1.0\" 200 3471", "251.111.109.143 - - [09/Jan/2017:22:49:02 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 2477", "101.163.230.250 - - [09/Jan/2017:22:52:31 +0100] \"DELETE /posts/2/display HTTP/1.0\" 404 2477", "200.19.168.148 - - [09/Jan/2017:22:57:11 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 3471"]}, "disp_title": "Last lines in a file.", "slug": "last_lines"}, {"version": 4, "description": "There is a file named \"access.log\" in the\ncurrent working directory. Print all lines\nin this file that contains the string \"GET\".\n", "author": "cmdchallenge", "expected_output": {"lines": ["163.56.115.58 - - [09/Jan/2017:22:29:57 +0100] \"GET /posts/2/display HTTP/1.0\" 200 3240", "75.113.188.234 - - [09/Jan/2017:22:30:43 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 1116", "69.16.40.148 - - [09/Jan/2017:22:34:33 +0100] \"GET /pages/create HTTP/1.0\" 500 3471", "225.219.54.140 - - [09/Jan/2017:22:35:30 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 500 2477", "207.243.19.2 - - [09/Jan/2017:22:38:03 +0100] \"GET /bar/create HTTP/1.0\" 200 1116", "199.37.62.156 - - [09/Jan/2017:22:42:18 +0100] \"GET /posts/1/display HTTP/1.0\" 200 2477", "251.111.109.143 - - [09/Jan/2017:22:49:02 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 2477", "200.19.168.148 - - [09/Jan/2017:22:57:11 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 3471"]}, "slug": "find_string_in_a_file", "example": "grep 'GET' access.log"}, {"version": 4, "description": "Print all files in the current directory,\none per line (not the path, just the filename)\nthat contain the string \"500\".\n", "author": "cmdchallenge", "expected_output": {"lines": ["README", "access.log", "access.log.1"], "order": false}, "slug": "search_for_files_containing_string", "example": "grep -l 500 *"}, {"version": 4, "description": "Print the relative file paths, one path\nper line for all filenames that start with\n\"access.log\" in the current directory.\n", "author": "cmdchallenge", "expected_output": {"lines": ["access.log", "access.log.1", "access.log.2"], "order": false, "re_sub": ["^\\./", ""]}, "slug": "search_for_files_by_extension", "example": "find . -name 'access.log*'"}, {"version": 4, "description": "Print all matching lines (without the filename\nor the file path) in all files under the current\ndirectory that start with \"access.log\" that\ncontain the string \"500\". Note that there are no\nfiles named \"access.log\" in the current directory,\nyou will need to search recursively.\n", "author": "cmdchallenge", "expected_output": {"lines": ["69.16.40.148 - - [09/Jan/2017:22:34:33 +0100] \"GET /pages/create HTTP/1.0\" 500 3471", "225.219.54.140 - - [09/Jan/2017:22:35:30 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 500 2477", "2.71.250.27 - - [09/Jan/2017:22:41:26 +0100] \"GET /pages/create HTTP/1.0\" 500 2477"], "order": false}, "slug": "search_for_string_in_files_recursive", "example": "grep -h 500 **/access.log*"}, {"version": 4, "description": "Extract all IP addresses from files\nthat start with \"access.log\" printing one\nIP address per line.\n", "author": "cmdchallenge", "expected_output": {"lines": ["163.56.115.58", "75.113.188.234", "69.16.40.148", "225.219.54.140", "207.243.19.2", "199.37.62.156", "55.74.240.123", "251.111.109.143", "101.163.230.250", "200.19.168.148", "108.68.174.15", "17.2.20.139", "28.151.137.59", "199.150.241.179", "2.71.250.27", "17.137.186.194", "151.84.119.34", "4.180.204.195", "9.230.96.54", "157.143.233.21"], "order": false, "re_sub": ["^[\\w/.]*?:", ""]}, "slug": "extract_ip_addresses", "example": "grep -Pho '^\\d+\\.\\d+\\.\\d+\\.\\d+' **/access.log*"}, {"author": "cmdchallenge", "slug": "delete_files", "version": 5, "description": "Delete all of the files in this challenge\ndirectory including all subdirectories and\ntheir contents.\n", "example": "find . -delete"}, {"version": 6, "description": "Count the number of files in the current\nworking directory. Print the number of\nfiles as a single integer.\n", "author": "cmdchallenge", "example_fail": "echo 3", "expected_output": {"lines": ["3"], "re_sub": ["^\\s+", ""]}, "slug": "count_files", "example": "find -L . -type f | wc -l"}, {"version": 4, "example": "sort access.log", "description": "Print the contents of access.log\nsorted.\n", "author": "cmdchallenge", "expected_output": {"lines": ["101.163.230.250 - - [09/Jan/2017:22:52:31 +0100] \"DELETE /posts/2/display HTTP/1.0\" 404 2477", "163.56.115.58 - - [09/Jan/2017:22:29:57 +0100] \"GET /posts/2/display HTTP/1.0\" 200 3240", "199.37.62.156 - - [09/Jan/2017:22:42:18 +0100] \"GET /posts/1/display HTTP/1.0\" 200 2477", "200.19.168.148 - - [09/Jan/2017:22:57:11 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 3471", "207.243.19.2 - - [09/Jan/2017:22:38:03 +0100] \"GET /bar/create HTTP/1.0\" 200 1116", "225.219.54.140 - - [09/Jan/2017:22:35:30 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 500 2477", "251.111.109.143 - - [09/Jan/2017:22:49:02 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 2477", "55.74.240.123 - - [09/Jan/2017:22:44:25 +0100] \"POST /posts/1/display HTTP/1.0\" 200 3471", "69.16.40.148 - - [09/Jan/2017:22:34:33 +0100] \"GET /pages/create HTTP/1.0\" 500 3471", "75.113.188.234 - - [09/Jan/2017:22:30:43 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 1116"]}, "disp_title": "Sort lines in a file.", "slug": "simple_sort"}, {"description": "Print the number of lines\nin access.log that contain the string\n\"GET\".\n", "author": "cmdchallenge", "expected_output": {"lines": ["8"], "re_sub": ["^\\s+", ""]}, "disp_title": "Count Matching Lines.", "example": "grep -c \"GET\" access.log", "version": 5, "example_fail": "echo 8", "slug": "count_string_in_line"}, {"version": 4, "example": "tr ';' '\\n' < split-me.txt", "description": "The file split-me.txt contains a list of\nnumbers separated by a ';' character.\nSplit the numbers on the ';' character,\none number per line.\n", "author": "cmdchallenge", "expected_output": {"lines": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}, "disp_title": "Split on a single character.", "slug": "split_on_a_char"}, {"version": 4, "example": "echo $(seq 1 100)", "description": "Print the numbers 1 to 100 separated\nby spaces.\n", "author": "cmdchallenge", "expected_output": {"lines": ["1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100"]}, "disp_title": "Generate a number sequence.", "slug": "print_number_sequence"}, {"version": 4, "example": "rm **/*.doc", "description": "There are files in this challenge with\ndifferent file extensions.\nRemove all files with the .doc extension\nrecursively in the current working directory.\n", "author": "cmdchallenge", "disp_title": "Remove files with extension.", "slug": "remove_files_with_extension"}, {"version": 4, "example": "sed -i 's/challenges are difficult//g' **/*.txt", "description": "This challenge has text files (with a .txt extension)\nthat contain the phrase \"challenges are difficult\".\nDelete this phrase recursively from all text files.\nNote that some files are in subdirectories so you will\nneed to search for them.\n", "author": "cmdchallenge", "disp_title": "Replace text in files", "slug": "replace_text_in_files"}, {"description": "The file sum-me.txt has a list of numbers,\none per line. Print the sum of these numbers.\n", "author": "cmdchallenge", "expected_output": {"lines": ["42"]}, "disp_title": "Sum numbers in a file.", "example": "paste -sd+ sum-me.txt | bc", "version": 5, "example_fail": "echo 42", "slug": "sum_all_numbers"}, {"version": 4, "example": "find -type f -printf '%f\\n'", "description": "Print all files in the current directory\nrecursively without the leading directory path.\n", "author": "cmdchallenge", "expected_output": {"lines": ["animi.doc", "corporis.xls", "odit.doc", "beatae.flac", "error.doc", "libero.xls", "necessitatibus.doc", "README", "totam"], "order": false}, "disp_title": "Print only the filenames", "slug": "just_the_files"}, {"version": 4, "example": "for f in $(find . -type f -name \"*.*\"); do mv \"$f\" \"${f%.*}\"; done", "description": "Rename all files removing the extension from\nthem in the current directory recursively.\n", "author": "cmdchallenge", "disp_title": "Remove file extensions.", "slug": "remove_extensions_from_files"}, {"version": 4, "example": "ls | tr ' ' '.'", "description": "The files in this challenge contain spaces.\nList all of the files (filenames only) in the\ncurrent directory but replace all spaces with\na '.' character.\n", "author": "cmdchallenge", "expected_output": {"lines": ["Adam.Simpson", "Alexis.Stein", "Allison.Brown", "Amy.Anderson", "Angel.Saunders", "Brad.Michael", "Briana.Wilson", "Carrie.Alexander", "Christine.Valdez", "Christopher.Miller", "Claudia.Mccormick", "Corey.Bird", "Courtney.Miller", "Crystal.Dunn", "Crystal.Valdez", "Erica.Richardson", "James.Harper", "James.Roberts", "Jared.Hill.DVM", "John.Nguyen", "Jorge.Ross", "Joseph.Hurst", "Karen.Ramirez", "Kevin.Price", "Kimberly.Parker", "Lori.Macias", "Luke.Mason", "Lynn.Robinson", "Mallory.Peterson", "Marie.Gutierrez", "Matthew.Romero", "Michaela.Hobbs", "Molly.Stevens", "Mr..James.Lopez", "Mr..Shawn.Martin", "Mrs..Jade.Clark", "Olivia.Irwin", "Parker.Gilbert", "README", "Robert.Gregory", "Robert.Hill", "Sarah.Hill", "Scott.Rice", "Sheri.Bishop", "Tamara.Anderson", "Tammy.Galloway", "Terri.Young", "Thomas.Parks", "Thomas.Washington", "Tiffany.Clark", "Yvonne.Myers"], "order": false}, "disp_title": "Replace spaces in file names.", "slug": "replace_spaces_in_filenames"}, {"version": 1, "description": "In this challenge there are some directories containing files\nwith different extensions. Print all directories,\none per line without duplicates that contain\none or more files with a \".tf\" extension.\n", "author": "cmdchallenge", "expected_output": {"lines": ["terraform", "terraform/modules/load_balancer", "terraform/modules/virtual_machine", "terraform/modules/vpn"], "order": false, "re_sub": ["^\\./", ""]}, "slug": "dirs_containing_files_with_extension", "example": "find . -name \"*.tf\" -type f -exec dirname {} \\; | sort | uniq"}, {"version": 4, "example": "find . -type f -name '[[:digit:]]*' -printf '%f\\n'", "description": "There are a mix of files in this directory\nthat start with letters and numbers. Print\nthe filenames (just the filenames) of all\nfiles that start with a number recursively\nin the current directory.\n", "author": "cmdchallenge", "expected_output": {"lines": ["974Michael Bowman", "540Katherine Jones", "436Teresa Owens", "04Carrie Alexander", "778Holly Archer", "3maxime.mp3", "682Terri Jones", "511Tammy Welch", "293Linda Bennett", "670James Jacobs", "737Jeffrey Davis", "42Robert Hill", "25Brandon Mcdonald", "402Nancy Henson", "78Michelle Spencer", "132Rebecca Rubio", "639Charles Ferguson", "335John Joseph", "99blanditiis.avi", "477Thomas Pierce MD", "757Robert Marquez", "388Andrew Carter", "48Thomas Allen", "593Brett Martin"], "order": false}, "disp_title": "Print files starting with a number.", "slug": "files_starting_with_a_number"}, {"version": 4, "example": "sed -n '25p' faces.txt", "description": "Print the 25th line of the file faces.txt\n", "author": "cmdchallenge", "expected_output": {"lines": ["\u00af\\_(\u30c4)_/\u00af"]}, "disp_title": "Print the nth line.", "slug": "print_nth_line"}, {"version": 4, "example": "tac README", "description": "Print the lines of the README file in this directory in\nreverse line order so that the last line is printed first\nand the first line is printed last.\n~~~~~~~~~~~~~~~~~~~~~\nIn the future\nEnvironmental destruction will be the norm\nNo longer can it be said that\nMy peers and I care about this earth\nIt will be evident that\nMy generation is apathetic and lethargic\nIt is foolish to presume that\nThere is hope\n~~~~~~~~~~~~~~~~~~~~~\n-Jonathan Reed \"The Lost Generation\"\n", "author": "cmdchallenge", "expected_output": {"lines": ["# ", "# -Jonathan Reed \"The Lost Generation\"", "# ~~~~~~~~~~~~~~~~~~~~~", "# There is hope", "# It is foolish to presume that", "# My generation is apathetic and lethargic", "# It will be evident that", "# My peers and I care about this earth", "# No longer can it be said that", "# Environmental destruction will be the norm", "# In the future", "# ~~~~~~~~~~~~~~~~~~~~~", "# and the first line is printed last.", "# reverse line order so that the last line is printed first", "# Print the lines of the README file in this directory in", "", "# **************", "# Reverse the README"]}, "disp_title": "Reverse the README", "slug": "reverse_readme"}, {"version": 4, "description": "Print the file faces.txt, but only print the first instance of each\nduplicate line, even if the duplicates don't appear next to each other.\nNote that order matters so don't sort the lines before removing duplicates.\n", "author": "cmdchallenge", "disp_time": "Remove duplicate lines without sorting", "expected_output": {"lines": ["(\u25d5\u203f\u25d5)", "(^\u032e^)", "\u0298\u203f\u0298", "\u0ca0_\u0ca0", "\u0ca0\u2323\u0ca0", "\u0ca0\u203f\u0ca0", "(\u0298\u203f\u0298)", "(\u0ca0_\u0ca0)", "\u00af\\_(\u30c4)_/\u00af", "(\u0ca0\u2323\u0ca0", "\u0ca0\u0ca0\u2323\u0ca0)", "(\u0ca0\u203f\u0ca0)", "\u0669\u25d4\u032f\u25d4\u06f6", "\u30fd\u0f3c\u0e88\u0644\u035c\u0e88\u0f3d\uff89", "\u2665\u203f\u2665", "\u25d4\u032f\u25d4", "\u2299\ufe4f\u2299", "(\u00ac_\u00ac)", "(\uff1b\u4e00_\u4e00)", "(\u0361\u00b0 \u035c\u0296 \u0361\u00b0)", "(\u00b0 \u035c\u0296 \u00b0)", "\u00af\\(\u00b0_o)/\u00af", "( \uff9f\u30ee\uff9f)", "(\ufe3a\ufe39\ufe3a)"]}, "slug": "remove_duplicate_lines", "example": "awk '!x[$0]++' faces.txt"}, {"version": 1, "example": "cat table.csv | column -t -s\",\"", "description": "The file \"table.csv\" contains the following comma-separated lines:\nid,name,count\n4,susan,11\n33,alice,22\n1772,joe,33\n\nPrint the rows as a table, like the following:\nid    name   count\n4     susan  11\n33    alice  22\n1772  joe    33\n", "author": "cmdchallenge", "expected_output": {"lines": ["id    name   count", "4     susan  11", "33    alice  22", "1772  joe    33"]}, "disp_title": "Displaying a table from a csv", "slug": "disp_table"}, {"description": "The file random-numbers.txt contains a list\nof 100 random integers. Print the number of\nunique prime numbers contained in the file.\n", "author": "cmdchallenge", "expected_output": {"lines": ["12"]}, "disp_title": "Finding prime numbers", "example": "for num in $(cat random-numbers.txt); do [[ $num == $(factor $num | cut -d\" \" -f2) ]] && echo $num; done | sort | uniq | wc -l", "version": 1, "example_fail": "echo 12", "slug": "find_primes"}, {"version": 4, "example": "perl -pne  's/!(?![ \\n])//g;' war_and_peace.txt | perl -pne 's/(?<=[.])!//g' | perl -pne 's/!(?= [a-z])//g'", "description": "The following excerpt from War and Peace is saved to\nthe file 'war_and_peace.txt':\n\nShe is betraying us! Russia alone must save Europe.\nOur gracious sovereign recognizes his high vocation\nand will be true to it. That is the one thing I have\nfaith in! Our good and wonderful sovereign has to\nperform the noblest role on earth, and he is so virtuous\nand noble that God will not forsake him. He will fulfill\nhis vocation and crush the hydra of revolution, which\nhas become more terrible than ever in the person of this\nmurderer and villain!\n\nThe file however has been corrupted, there are random '!'\nmarks inserted throughout.  Print the original text.\n", "author": "cmdchallenge", "expected_output": {"lines": ["She is betraying us! Russia alone must save Europe.", "Our gracious sovereign recognizes his high vocation", "and will be true to it. That is the one thing I have", "faith in! Our good and wonderful sovereign has to", "perform the noblest role on earth, and he is so virtuous", "and noble that God will not forsake him. He will fulfill", "his vocation and crush the hydra of revolution, which", "has become more terrible than ever in the person of this", "murderer and villain!"]}, "disp_title": "Removing extra '!' characters from text", "slug": "corrupted_text"}, {"version": 4, "example": "comm -12 <(cut -d' ' -f1 access.log.1 | sort) <(cut -d' ' -f1 access.log.2 | sort)", "description": "access.log.1 and access.log.2 are http server logs. Print the IP\naddresses common to both files, one per line.\n", "author": "amboar", "expected_output": {"lines": ["108.68.174.15", "17.137.186.194", "2.71.250.27", "28.151.137.59"], "order": false}, "disp_title": "Print common lines", "slug": "print_common_lines"}, {"version": 4, "example": "awk '/404/{print a}{a=$0}' **/access.log*", "description": "Print all matching lines (without the filename\nor the file path) in all files under the current\ndirectory that start with \"access.log\", where\nthe next line contains the string \"404\". Note that\nyou will need to search recursively.\n", "author": "mmr", "expected_output": {"lines": ["251.111.109.143 - - [09/Jan/2017:22:49:02 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 2477", "17.137.186.194 - - [09/Jan/2017:22:43:17 +0100] \"GET /pages/create HTTP/1.0\" 200 1116", "89.148.148.238 - - [09/Jan/2017:22:33:09 +0100] \"GET /posts/1/display HTTP/1.0\" 502 2477", "138.212.253.84 - - [09/Jan/2017:22:53:54 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 3471"], "order": false}, "disp_title": "Print line before match", "slug": "print_line_before"}, {"version": 4, "example": "for i in $(ls *.bin); do if [[ `cmp base.bin $i` ]]; then echo $i; fi; done", "description": "Print all files with a .bin extension in the current directory\nthat are different than the file named base.bin.\n", "author": "anonymous", "expected_output": {"lines": ["test2.bin", "test4.bin", "test5.bin", "test7.bin"], "order": false}, "disp_title": "Print files that are different", "slug": "print_files_if_different"}, {"version": 4, "description": "List all of the files in the current directory, display a slash (`/') immediately after\neach pathname that is a directory, an asterisk (`*') after each that is executable,\nan at sign (`@') after each symbolic link. Output one file per line.\nHint: directories are suffixed with '/', executables with '*'.\nYou will need to restrict the number of columns too.\n", "author": "gitunique", "expected_output": {"lines": ["./", "../", ".hidden-dir/", ".hidden-file", "README", "normal-file.dat", "runthis.sh*", "symlink-file.dat@"]}, "slug": "list_files_adv", "example": "ls -laF -C1"}, {"version": 5, "description": "There is a file:\n./.../  /. .the flag.txt\nShow its contents on the screen.\n", "author": "gitunique", "example_fail": "echo you got it!", "expected_output": {"lines": ["you got it!"]}, "slug": "nested_dirs", "example": "cat ./.../\\ \\ /.\\ .the\\ flag.txt"}, {"version": 5, "description": "How many lines contain tab characters in\nthe file named \"file-with-tabs.txt\" in the\ncurrent directory.\n", "author": "anonymous", "example_fail": "echo 3", "expected_output": {"lines": ["3"]}, "slug": "find_tabs_in_a_file", "example": "grep -P '\\t' file-with-tabs.txt | wc -l"}, {"version": 4, "example": "find . -type f -regextype posix-extended ! -regex \".*(\\.txt|\\.exe)$\" -exec rm {} +", "description": "There are files in this challenge with\ndifferent file extensions.\nRemove all files without the .txt and .exe extensions\nrecursively in the current working directory.\n", "author": "bryfry", "disp_title": "Remove files without extension.", "slug": "remove_files_without_extension"}, {"version": 4, "example": "rm ./-*", "description": "There are some files in this directory that\nstart with a dash in the filename.\nRemove those files.\n", "author": "anonymous", "disp_title": "Remove files that start with a dash", "slug": "remove_files_with_a_dash"}, {"version": 4, "example": "cat ps-ef1 > aux; sed '1 d' ps-ef2 >> aux; cat aux | sort -nk2,2 | uniq", "description": "There are two files in this directory, ps-ef1 and ps-ef2.\nPrint the contents of both files sorted by PID and\ndelete repeated lines.\n", "author": "verovan", "expected_output": {"lines": ["UID        PID  PPID  C STIME TTY          TIME CMD", "root         1     0  0 mar04 ?        00:00:13 /sbin/init", "root         2     0  0 mar04 ?        00:00:00 [kthreadd]", "root         3     2  0 mar04 ?        00:01:07 [ksoftirqd/0]", "user         5     2  0 mar04 ?        00:00:00 [kworker/0:0H]", "user         7     2  0 mar04 ?        00:07:06 [rcu_sched]", "user         8     2  0 mar04 ?        00:00:00 [rcu_bh]", "root         9     2  0 mar04 ?        00:00:00 [migration/0]", "root        10     2  0 mar04 ?        00:00:04 [watchdog/0]", "user        11     2  0 mar04 ?        00:00:04 [watchdog/1]", "root        12     2  0 mar04 ?        00:00:00 [migration/1]", "root        13     2  0 mar04 ?        00:00:59 [ksoftirqd/1]", "user        15     2  0 mar04 ?        00:00:00 [kworker/1:0H]", "user        16     2  0 mar04 ?        00:00:04 [watchdog/2]", "root        17     2  0 mar04 ?        00:00:00 [migration/2]", "root        18     2  0 mar04 ?        00:00:59 [ksoftirqd/2]", "root        20     2  0 mar04 ?        00:00:00 [kworker/2:0H]", "user        21     2  0 mar04 ?        00:00:04 [watchdog/3]", "root        22     2  0 mar04 ?        00:00:00 [migration/3]", "root        23     2  0 mar04 ?        00:01:29 [ksoftirqd/3]"]}, "disp_title": "Print the content sorted by PID", "slug": "print_sorted_by_key"}, {"version": 4, "description": "In the current directory there is a file called netstat.out\nprint all the IPv4 listening ports sorted from the higher to lower.\n", "author": "TaTo69", "expected_output": {"lines": ["45922", "9090", "8080", "1723", "1254", "1244", "1234", "111", "80", "22"]}, "slug": "IPv4_listening_ports", "example": "egrep  \"tcp\\ .*:**LISTEN\" netstat.out | awk '{print $4}' | sed -e 's/.*\\://g' | sort -nr"}, {"version": 4, "example": "cat les_miserables.txt| tr '[A-Za-z]' '[N-ZA-Mn-za-m]'", "description": "The following excerpt from Victor Hugo's \"Les miserables\", is saved to\nthe file 'les_miserables.txt':\n\nThe glance of women resembles certain combinations of wheels, which are\ntranquil in appearance yet formidable. You pass close to them every day,\npeaceably and with impunity, and without a suspicion of anything.\nA moment arrives when you forget that the thing is there.\nYou go and come, dream, speak, laugh. All at once you feel yourself\nclutched; all is over. The wheels hold you fast, the glance has\nensnared you. It has caught you, no matter where or how, by some portion\nof your thought which was fluttering loose, by some distraction which\nhad attacked you. You are lost.\n\nHowever, the file was encoded using rot13. Print the original content\nof the excerpt.\n", "author": "marrakchino", "expected_output": {"lines": ["The glance of women resembles certain combinations of wheels, which are", "tranquil in appearance yet formidable. You pass close to them every day,", "peaceably and with impunity, and without a suspicion of anything.", "A moment arrives when you forget that the thing is there.", "You go and come, dream, speak, laugh. All at once you feel yourself", "clutched; all is over. The wheels hold you fast, the glance has", "ensnared you. It has caught you, no matter where or how, by some portion", "of your thought which was fluttering loose, by some distraction which", "had attacked you. You are lost."]}, "disp_title": "Decoding a rot13 encoded file.", "slug": "rot13_decoding"}]
