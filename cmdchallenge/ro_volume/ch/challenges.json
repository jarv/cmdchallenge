[{"slug": "oops_cwd", "openemoji": "1F62D", "disp_title": "current working directory", "version": 1, "description": "A rogue process on this computer somehow deleted all of the files in the bin\ndirectory!\n\n---\nThe good news is that you still have a bash shell prompt to figure out how to prevent\nit from doing even more damage though you are only given one command to complete\neach task.\n\nFor the first challenge, all you need to do is figure out where you are,\nprint the current working directory.\n", "example": "pwd", "expected_output": {"lines": ["/var/challenges/oops_cwd"]}, "img": "cmd-no-bin", "tags": ["oops"]}, {"slug": "oops_list_files", "disp_title": "list files", "version": 2, "openemoji": "1F92F", "description": "Great, now that you know which directory you are in, you want to see what else\nis here. List all of the files on a single line, in the current working directory.\n\nHint: You won't be able to use the `ls` command, instead you will need to use\na bash builtin\n", "expected_failures": ["echo \"another-file.txt my-dissertation.txt\""], "expected_output": {"lines": ["another-file.txt my-dissertation.txt"]}, "example": "echo *", "img": "cmd-no-bin", "tags": ["oops"]}, {"slug": "oops_print_file_contents", "disp_title": "print file contents", "version": 1, "openemoji": "1F630", "description": "Oh no! You now remember there is a very important file in this directory.\n\nPrint its contents before the data is lost for forever!\n", "completions": ["my-dissertation.txt"], "example": "while read x; do echo $x; done < my-dissertation.txt", "expected_output": {"lines": [{"Rooter": "A Methodology for the Typical Unification"}, "", "of Access Points and Redundancy", "", "Jeremy Stribling, Daniel Aguayo and Maxwell Krohn", "", "ABSTRACT", "", "Many physicists would agree that, had it not been for", "congestion control, the evaluation of web browsers might never", "have occurred. In fact, few hackers worldwide would disagree", "with the essential uni\ufb01cation of voice-over-IP and public-", "private key pair. In order to solve this riddle, we con\ufb01rm that", "SMPs can be made stochastic, cacheable, and interposable.", "..."]}, "img": "cmd-no-bin", "tags": ["oops"]}, {"slug": "oops_print_process", "disp_title": "print process name", "version": 2, "openemoji": "1F627", "description": "You know there is a process on machine that is deleting files, the first thing\nyou want to do is identify the name of it. Print the name of the process\n\nHint: process information is stored in /proc, maybe there is a something there\nthat will help?\n", "example": "read x < /proc/42/cmdline ; echo $x", "expected_output": {"lines": ["oops-this-will-delete-bin-dirs"]}, "img": "cmd-no-bin", "tags": ["oops"]}, {"slug": "oops_kill_a_process", "disp_title": "kill a process", "version": 2, "openemoji": "1F625", "description": "You are doing great!\n\nYou managed to save your important file.\nNow that you know the process name\nit will be good to kill it before it does any more damanage.\n\nKill the running process\n", "example": "kill -9 42", "expected_failures": ["echo"], "img": "cmd-no-bin", "tags": ["oops"]}, {"slug": "hello_world", "openemoji": "1F40C", "disp_title": "hello world", "version": 5, "author": "cmdchallenge", "description": "Your first challenge is to print \"hello world\" on the terminal in a single command.\n\nHint: There are many ways to print text on the command line, one way is with the 'echo' command.\nTry it below and good luck!\n", "completions": ["place your advertisement here!"], "example": "echo 'hello world'", "expected_failures": ["echo \"nope\""], "expected_output": {"lines": ["hello world"]}}, {"slug": "current_working_directory", "openemoji": "1F98B", "disp_title": "cwd", "version": 5, "author": "cmdchallenge", "description": "Print the current working directory.\n", "example": "pwd", "expected_failures": ["echo \"nope\""], "expected_output": {"lines": ["/var/challenges/current_working_directory"]}}, {"slug": "list_files", "openemoji": "1F41B", "disp_title": "list files", "version": 8, "author": "cmdchallenge", "description": "List names of all the files in the current directory, one file per line.\n", "example": "ls", "expected_output": {"order": false, "lines": ["01-take.txt", "02-the.txt", "03-command.txt", "04-challenge.txt"]}, "expected_failures": ["echo -e \"01-take.txt\\n02-the.txt\\n03-command.txt\\n04-challenge.txt\""]}, {"slug": "print_file_contents", "openemoji": "1F41C", "disp_title": "file contents", "version": 5, "author": "cmdchallenge", "description": "There is a file named `access.log` in the current directory. Print the contents.\n", "completions": ["access.log"], "example": "cat access.log", "expected_output": {"lines": ["163.56.115.58 - - [09/Jan/2017:22:29:57 +0100] \"GET /posts/2/display HTTP/1.0\" 200 3240", "75.113.188.234 - - [09/Jan/2017:22:30:43 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 1116", "69.16.40.148 - - [09/Jan/2017:22:34:33 +0100] \"GET /pages/create HTTP/1.0\" 500 3471", "225.219.54.140 - - [09/Jan/2017:22:35:30 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 500 2477", "207.243.19.2 - - [09/Jan/2017:22:38:03 +0100] \"GET /bar/create HTTP/1.0\" 200 1116", "199.37.62.156 - - [09/Jan/2017:22:42:18 +0100] \"GET /posts/1/display HTTP/1.0\" 200 2477", "55.74.240.123 - - [09/Jan/2017:22:44:25 +0100] \"POST /posts/1/display HTTP/1.0\" 200 3471", "251.111.109.143 - - [09/Jan/2017:22:49:02 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 2477", "101.163.230.250 - - [09/Jan/2017:22:52:31 +0100] \"DELETE /posts/2/display HTTP/1.0\" 404 2477", "200.19.168.148 - - [09/Jan/2017:22:57:11 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 3471"]}}, {"slug": "last_lines", "openemoji": "1F578", "version": 5, "author": "cmdchallenge", "disp_title": "last lines", "description": "Print the last 5 lines of \"access.log\".\n", "completions": ["access.log"], "example": "tail -n 5 access.log", "expected_output": {"lines": ["199.37.62.156 - - [09/Jan/2017:22:42:18 +0100] \"GET /posts/1/display HTTP/1.0\" 200 2477", "55.74.240.123 - - [09/Jan/2017:22:44:25 +0100] \"POST /posts/1/display HTTP/1.0\" 200 3471", "251.111.109.143 - - [09/Jan/2017:22:49:02 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 2477", "101.163.230.250 - - [09/Jan/2017:22:52:31 +0100] \"DELETE /posts/2/display HTTP/1.0\" 404 2477", "200.19.168.148 - - [09/Jan/2017:22:57:11 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 3471"]}}, {"slug": "create_file", "openemoji": "1F433", "disp_title": "Create a file", "version": 2, "author": "cmdchallenge", "description": "Create an empty file named `take-the-command-challenge` in the current working directory.\n", "completions": ["take-the-command-challenge"], "example": "touch take-the-command-challenge", "expected_failures": ["echo", "echo ' ' > take-the-command-challenge"]}, {"slug": "create_directory", "openemoji": "1F40B", "disp_title": "Create a directory", "version": 1, "author": "cmdchallenge", "description": "Create a directory named `tmp/files` in the current working directory\n", "completions": ["take-the-command-challenge", "tmp/files"], "example": "mkdir -p tmp/files", "expected_failures": ["echo"]}, {"slug": "copy_file", "openemoji": "1F42C", "disp_title": "copy file", "version": 3, "author": "cmdchallenge", "description": "Copy the file named `take-the-command-challenge` to the directory `tmp/files`\n", "completions": ["take-the-command-challenge", "tmp/files"], "example": "cp take-the-command-challenge tmp/files/.", "expected_failures": ["echo", "mv take-the-command-challenge tmp/files"]}, {"slug": "move_file", "openemoji": "1F41F", "disp_title": "move file", "version": 1, "author": "cmdchallenge", "description": "Move the file named `take-the-command-challenge` to the directory `tmp/files`\n", "completions": ["take-the-command-challenge", "tmp/files"], "example": "mv take-the-command-challenge tmp/files/.", "expected_failures": ["echo"]}, {"slug": "create_symlink", "openemoji": "1F420", "disp_title": "create symlink", "version": 1, "author": "cmdchallenge", "description": "A symbolic link is a type of file that is a reference to another file.\n\nCreate a symbolic link named `take-the-command-challenge` that points to the\nfile `tmp/files/take-the-command-challenge`.\n", "completions": ["take-the-command-challenge", "tmp/files/take-the-command-challenge"], "example": "ln -s /var/challenges/create_symlink/tmp/files/take-the-command-challenge", "expected_failures": ["echo"]}, {"slug": "delete_files", "openemoji": "1F421", "disp_title": "delete files", "version": 7, "author": "cmdchallenge", "description": "Delete all of the files in this challenge directory including all subdirectories and their contents.\n", "example": "find . -delete", "expected_failures": ["rm -rf /var/challenges/delete_files"]}, {"slug": "remove_files_with_extension", "openemoji": "1F43A", "version": 5, "author": "cmdchallenge", "disp_title": "remove files with extension", "description": "There are files in this challenge with different file extensions.\nRemove all files with the .doc extension recursively in the current working directory.\n", "example": "rm **/*.doc", "expected_failures": ["echo"]}, {"slug": "find_string_in_a_file", "openemoji": "1F41D", "disp_title": "find string", "version": 5, "author": "cmdchallenge", "description": "There is a file named `access.log` in the current working directory. Print all lines in this file that contains the string \"GET\".\n", "completions": ["access.log"], "example": "grep 'GET' access.log", "expected_output": {"lines": ["163.56.115.58 - - [09/Jan/2017:22:29:57 +0100] \"GET /posts/2/display HTTP/1.0\" 200 3240", "75.113.188.234 - - [09/Jan/2017:22:30:43 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 1116", "69.16.40.148 - - [09/Jan/2017:22:34:33 +0100] \"GET /pages/create HTTP/1.0\" 500 3471", "225.219.54.140 - - [09/Jan/2017:22:35:30 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 500 2477", "207.243.19.2 - - [09/Jan/2017:22:38:03 +0100] \"GET /bar/create HTTP/1.0\" 200 1116", "199.37.62.156 - - [09/Jan/2017:22:42:18 +0100] \"GET /posts/1/display HTTP/1.0\" 200 2477", "251.111.109.143 - - [09/Jan/2017:22:49:02 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 2477", "200.19.168.148 - - [09/Jan/2017:22:57:11 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 3471"]}}, {"slug": "search_for_files_containing_string", "openemoji": "1F41E", "disp_title": "search for string", "version": 6, "author": "cmdchallenge", "description": "Print all files in the current directory, one per line (not the path, just the filename) that contain the string \"500\".\n", "completions": ["access.log"], "example": "grep -l 500 *", "expected_failures": ["ls *[^2]"], "expected_output": {"order": false, "lines": ["access.log", "access.log.1"]}}, {"slug": "search_for_files_by_extension", "openemoji": "1F997", "disp_title": "search for extension", "version": 5, "author": "cmdchallenge", "description": "Print the relative file paths, one path per line for all filenames that start with \"access.log\" in the current directory.\n", "completions": ["access.log"], "example": "find . -name 'access.log*'", "expected_output": {"order": false, "re_sub": ["^\\./", ""], "lines": ["access.log", "access.log.1", "access.log.2"]}}, {"slug": "search_for_string_in_files_recursive", "openemoji": "1F577", "disp_title": "search recursive", "version": 5, "author": "cmdchallenge", "description": "Print all matching lines (without the filename or the file path) in all files under the current directory that start with \"access.log\" that contain the string \"500\".\n\nNote that there are no files named `access.log` in the current directory, you will need to search recursively.\n", "completions": ["access.log"], "example": "grep -h 500 **/access.log*", "expected_output": {"order": false, "lines": ["69.16.40.148 - - [09/Jan/2017:22:34:33 +0100] \"GET /pages/create HTTP/1.0\" 500 3471", "225.219.54.140 - - [09/Jan/2017:22:35:30 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 500 2477", "2.71.250.27 - - [09/Jan/2017:22:41:26 +0100] \"GET /pages/create HTTP/1.0\" 500 2477"]}}, {"slug": "extract_ip_addresses", "openemoji": "1F982", "disp_title": "find ip address", "version": 5, "author": "cmdchallenge", "description": "Extract all IP addresses from files that start with \"access.log\" printing one IP address per line.\n", "completions": ["access.log"], "example": "grep -Pho '^\\d+\\.\\d+\\.\\d+\\.\\d+' **/access.log*", "expected_output": {"re_sub": ["^[\\w/.]*?:", ""], "order": false, "lines": ["163.56.115.58", "75.113.188.234", "69.16.40.148", "225.219.54.140", "207.243.19.2", "199.37.62.156", "55.74.240.123", "251.111.109.143", "101.163.230.250", "200.19.168.148", "108.68.174.15", "17.2.20.139", "28.151.137.59", "199.150.241.179", "2.71.250.27", "17.137.186.194", "151.84.119.34", "4.180.204.195", "9.230.96.54", "157.143.233.21"]}}, {"slug": "count_files", "openemoji": "1FAB0", "disp_title": "count files", "version": 8, "author": "cmdchallenge", "description": "Count the number of files in the current working directory. Print the number of files as a single integer.\n", "example": "find -L . -type f | wc -l", "expected_failures": ["echo 2"], "expected_output": {"re_sub": ["^\\s+", ""], "lines": ["2"]}}, {"slug": "simple_sort", "openemoji": "1FAB1", "disp_title": "simple sort", "version": 5, "author": "cmdchallenge", "description": "Print the contents of access.log sorted.\n", "completions": ["access.log"], "example": "sort access.log", "expected_output": {"lines": ["101.163.230.250 - - [09/Jan/2017:22:52:31 +0100] \"DELETE /posts/2/display HTTP/1.0\" 404 2477", "163.56.115.58 - - [09/Jan/2017:22:29:57 +0100] \"GET /posts/2/display HTTP/1.0\" 200 3240", "199.37.62.156 - - [09/Jan/2017:22:42:18 +0100] \"GET /posts/1/display HTTP/1.0\" 200 2477", "200.19.168.148 - - [09/Jan/2017:22:57:11 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 3471", "207.243.19.2 - - [09/Jan/2017:22:38:03 +0100] \"GET /bar/create HTTP/1.0\" 200 1116", "225.219.54.140 - - [09/Jan/2017:22:35:30 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 500 2477", "251.111.109.143 - - [09/Jan/2017:22:49:02 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 2477", "55.74.240.123 - - [09/Jan/2017:22:44:25 +0100] \"POST /posts/1/display HTTP/1.0\" 200 3471", "69.16.40.148 - - [09/Jan/2017:22:34:33 +0100] \"GET /pages/create HTTP/1.0\" 500 3471", "75.113.188.234 - - [09/Jan/2017:22:30:43 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 1116"]}}, {"slug": "count_string_in_line", "openemoji": "1F9A0", "disp_title": "count the strings", "version": 6, "author": "cmdchallenge", "description": "Print the number of lines in access.log that contain the string \"GET\".\n", "completions": ["access.log"], "example": "grep -c \"GET\" access.log", "expected_failures": ["echo 8"], "expected_output": {"re_sub": ["^\\s+", ""], "lines": ["8"]}}, {"slug": "split_on_a_char", "openemoji": "1F435", "disp_title": "split on a char", "version": 5, "author": "cmdchallenge", "description": "The file split-me.txt contains a list of numbers separated by a `;` character.\n\nSplit the numbers on the `;` character, one number per line.\n", "completions": ["split-me.txt"], "example": "tr ';' '\\n' < split-me.txt", "expected_output": {"lines": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}}, {"slug": "print_number_sequence", "openemoji": "1F436", "disp_title": "generate a number sequence", "version": 5, "author": "cmdchallenge", "description": "Print the numbers 1 to 100 separated by spaces.\n", "example": "echo $(seq 1 100)", "expected_output": {"lines": ["1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100"]}}, {"slug": "replace_text_in_files", "openemoji": "1F98A", "disp_title": "replace text in files", "version": 5, "author": "cmdchallenge", "example": "sed -i 's/challenges are difficult//g' **/*.txt", "expected_failures": ["echo"], "description": "This challenge has text files (with a .txt extension) that contain the phrase \"challenges are difficult\".  Delete this phrase from all text files recursively.\n\nNote that some files are in subdirectories so you will need to search for them.\n"}, {"slug": "sum_all_numbers", "openemoji": "1F431", "disp_title": "sum the numbers", "version": 6, "author": "cmdchallenge", "example": "paste -sd+ sum-me.txt | bc", "expected_failures": ["echo 42"], "description": "The file sum-me.txt has a list of numbers, one per line. Print the sum of these numbers.\n", "expected_output": {"lines": ["42"]}}, {"slug": "just_the_files", "openemoji": "1F981", "disp_title": "only the filenames", "version": 5, "author": "cmdchallenge", "description": "Print all files in the current directory recursively without the leading directory path.\n", "example": "find -type f -printf '%f\\n'", "expected_output": {"order": false, "lines": ["animi.doc", "corporis.xls", "odit.doc", "beatae.flac", "error.doc", "libero.xls", "necessitatibus.doc", "totam"]}}, {"slug": "remove_extensions_from_files", "openemoji": "1F42F", "disp_title": "remove extensions", "version": 5, "author": "cmdchallenge", "description": "Rename all files removing the extension from them in the current directory recursively.\n", "example": "for f in $(find . -type f -name \"*.*\"); do mv \"$f\" \"${f%.*}\"; done", "expected_failures": ["echo"]}, {"slug": "replace_spaces_in_filenames", "openemoji": "1F434", "disp_title": "replace spaces", "version": 5, "author": "cmdchallenge", "description": "The files in this challenge contain spaces.\nList all of the files (filenames only) in the current directory but replace all spaces with\na '.' character.\n", "example": "ls | tr ' ' '.'", "expected_output": {"order": false, "lines": ["Adam.Simpson", "Alexis.Stein", "Allison.Brown", "Amy.Anderson", "Angel.Saunders", "Brad.Michael", "Briana.Wilson", "Carrie.Alexander", "Christine.Valdez", "Christopher.Miller", "Claudia.Mccormick", "Corey.Bird", "Courtney.Miller", "Crystal.Dunn", "Crystal.Valdez", "Erica.Richardson", "James.Harper", "James.Roberts", "Jared.Hill.DVM", "John.Nguyen", "Jorge.Ross", "Joseph.Hurst", "Karen.Ramirez", "Kevin.Price", "Kimberly.Parker", "Lori.Macias", "Luke.Mason", "Lynn.Robinson", "Mallory.Peterson", "Marie.Gutierrez", "Matthew.Romero", "Michaela.Hobbs", "Molly.Stevens", "Mr..James.Lopez", "Mr..Shawn.Martin", "Mrs..Jade.Clark", "Olivia.Irwin", "Parker.Gilbert", "Robert.Gregory", "Robert.Hill", "Sarah.Hill", "Scott.Rice", "Sheri.Bishop", "Tamara.Anderson", "Tammy.Galloway", "Terri.Young", "Thomas.Parks", "Thomas.Washington", "Tiffany.Clark", "Yvonne.Myers"]}}, {"slug": "dirs_containing_files_with_extension", "openemoji": "1F984", "disp_title": "directories containing files", "version": 2, "author": "cmdchallenge", "description": "In this challenge there are some directories containing files with different extensions.\nPrint all directories, one per line without duplicates that contain one or more files with a \".tf\" extension.\n", "completions": ["terraform", "main.tf", "modules", "load_balancer", "main.tf", "virtual_machine", "outputs.tf", "main.tf", "vpn", "main.tf", "files", "bootstrap.sh", "templates", "config.template", "bin", "dostuff.sh"], "example": "find . -name \"*.tf\" -type f -exec dirname {} \\; | sort | uniq", "expected_output": {"order": false, "re_sub": ["^\\./", ""], "lines": ["terraform", "terraform/modules/load_balancer", "terraform/modules/virtual_machine", "terraform/modules/vpn"]}}, {"slug": "files_starting_with_a_number", "openemoji": "1F42E", "disp_title": "files starting with a number", "version": 5, "author": "cmdchallenge", "description": "There are a mix of files in this directory that start with letters and numbers.\nPrint the filenames (just the filenames) of all files that start with a number recursively in the current directory.\n", "completions": ["757Robert Marquez", "Mr. James Lopez", "974Michael Bowman", "477Thomas Pierce MD", "04Carrie Alexander", "42Robert Hill", "737Jeffrey Davis", "778Holly Archer", "402Nancy Henson", "436Teresa Owens", "48Thomas Allen", "001dir", "exercitationem.mp3", "3maxime.mp3", "Jorge Ross", "540Katherine Jones", "682Terri Jones", "639Charles Ferguson", "25Brandon Mcdonald", "132Rebecca Rubio", "78Michelle Spencer", "Matthew Romero", "670James Jacobs", "dir", "provident.avi", "99blanditiis.avi", "sit.avi", "nisi.avi", "totam.avi", "293Linda Bennett", "335John Joseph", "593Brett Martin", "388Andrew Carter", "tmp", "511Tammy Welch", "Sheri Bishop"], "example": "find . -type f -name '[[:digit:]]*' -printf '%f\\n'", "expected_output": {"order": false, "lines": ["974Michael Bowman", "540Katherine Jones", "436Teresa Owens", "04Carrie Alexander", "778Holly Archer", "3maxime.mp3", "682Terri Jones", "511Tammy Welch", "293Linda Bennett", "670James Jacobs", "737Jeffrey Davis", "42Robert Hill", "25Brandon Mcdonald", "402Nancy Henson", "78Michelle Spencer", "132Rebecca Rubio", "639Charles Ferguson", "335John Joseph", "99blanditiis.avi", "477Thomas Pierce MD", "757Robert Marquez", "388Andrew Carter", "48Thomas Allen", "593Brett Martin"]}}, {"slug": "print_nth_line", "openemoji": "1F437", "disp_title": "nth line", "version": 5, "author": "cmdchallenge", "description": "Print the 25th line of the file faces.txt\n", "example": "sed -n '25p' faces.txt", "expected_output": {"lines": ["\u00af\\_(\u30c4)_/\u00af"]}}, {"slug": "reverse_readme", "openemoji": "1F42D", "disp_title": "reverse", "version": 5, "author": "cmdchallenge", "description": "Print the lines of the file `reverse-me.txt` in this directory in reverse line order so that the last line is printed first and the first line is printed last.\n\n```\n~~~~~~~~~~~~~~~~~~~~~\nIn the future\nEnvironmental destruction will be the norm\nNo longer can it be said that\nMy peers and I care about this earth\nIt will be evident that\nMy generation is apathetic and lethargic\nIt is foolish to presume that\nThere is hope\n~~~~~~~~~~~~~~~~~~~~~\n-Jonathan Reed \"The Lost Generation\"\n```\n", "example": "tac reverse-me.txt", "expected_output": {"lines": ["-Jonathan Reed \"The Lost Generation\"", "~~~~~~~~~~~~~~~~~~~~~", "There is hope", "It is foolish to presume that", "My generation is apathetic and lethargic", "It will be evident that", "My peers and I care about this earth", "No longer can it be said that", "Environmental destruction will be the norm", "In the future", "~~~~~~~~~~~~~~~~~~~~~"]}}, {"slug": "remove_duplicate_lines", "openemoji": "1F439", "disp_title": "remove duplicates", "version": 5, "author": "cmdchallenge", "description": "Print the file faces.txt, but only print the first instance of each duplicate line, even if the duplicates don't appear next to each other.\n\nNote that order matters so don't sort the lines before removing duplicates.\n", "example": "awk '!x[$0]++' faces.txt", "expected_output": {"lines": ["(\u25d5\u203f\u25d5)", "(^\u032e^)", "\u0298\u203f\u0298", "\u0ca0_\u0ca0", "\u0ca0\u2323\u0ca0", "\u0ca0\u203f\u0ca0", "(\u0298\u203f\u0298)", "(\u0ca0_\u0ca0)", "\u00af\\_(\u30c4)_/\u00af", "(\u0ca0\u2323\u0ca0", "\u0ca0\u0ca0\u2323\u0ca0)", "(\u0ca0\u203f\u0ca0)", "\u0669\u25d4\u032f\u25d4\u06f6", "\u30fd\u0f3c\u0e88\u0644\u035c\u0e88\u0f3d\uff89", "\u2665\u203f\u2665", "\u25d4\u032f\u25d4", "\u2299\ufe4f\u2299", "(\u00ac_\u00ac)", "(\uff1b\u4e00_\u4e00)", "(\u0361\u00b0 \u035c\u0296 \u0361\u00b0)", "(\u00b0 \u035c\u0296 \u00b0)", "\u00af\\(\u00b0_o)/\u00af", "( \uff9f\u30ee\uff9f)", "(\ufe3a\ufe39\ufe3a)"]}}, {"slug": "find_primes", "openemoji": "1F43B", "disp_title": "finding prime numbers", "version": 2, "author": "cmdchallenge", "example": "for num in $(cat random-numbers.txt); do [[ $num == $(factor $num | cut -d\" \" -f2) ]] && echo $num; done | sort | uniq | wc -l", "expected_failures": ["echo 12"], "completions": ["random-numbers.txt"], "description": "The file `random-numbers.txt` contains a list of 100 random integers.\nPrint the number of unique prime numbers contained in the file.\n", "expected_output": {"lines": ["12"]}}, {"slug": "print_common_lines", "openemoji": "1F43C", "version": 5, "author": "amboar", "disp_title": "print common lines", "example": "comm -12 <(cut -d' ' -f1 access.log.1 | sort) <(cut -d' ' -f1 access.log.2 | sort)", "completions": ["access.log.1", "access.log.2"], "description": "`access.log.1` and `access.log.2` are http server logs.\n\nPrint the IP addresses common to both files, one per line.\n", "expected_output": {"order": false, "lines": ["108.68.174.15", "17.137.186.194", "2.71.250.27", "28.151.137.59"]}}, {"slug": "print_line_before", "openemoji": "1F423", "disp_title": "print line before match", "version": 5, "author": "mmr", "example": "awk '/404/{print a}{a=$0}' **/access.log*", "description": "Print all matching lines (without the filename or the file path) in all files under the current directory that start with \"access.log\", where the next line contains the string \"404\".\n\nNote that you will need to search recursively.\n", "completions": ["access.log"], "expected_output": {"order": false, "lines": ["251.111.109.143 - - [09/Jan/2017:22:49:02 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 2477", "17.137.186.194 - - [09/Jan/2017:22:43:17 +0100] \"GET /pages/create HTTP/1.0\" 200 1116", "89.148.148.238 - - [09/Jan/2017:22:33:09 +0100] \"GET /posts/1/display HTTP/1.0\" 502 2477", "138.212.253.84 - - [09/Jan/2017:22:53:54 +0100] \"GET /posts/foo?appID=xxxx HTTP/1.0\" 200 3471"]}}, {"slug": "print_files_if_different", "openemoji": "1F99A", "version": 5, "author": "anonymous", "disp_title": "files that are different", "example": "for i in $(ls *.bin); do if [[ `cmp base.bin $i` ]]; then echo $i; fi; done", "description": "Print all files with a `.bin` extension in the current directory that are different than the file named base.bin.\n", "expected_output": {"order": false, "lines": ["test2.bin", "test4.bin", "test5.bin", "test7.bin"]}}, {"slug": "nested_dirs", "openemoji": "1F438", "disp_title": "tricky file", "version": 6, "author": "gitunique", "description": "\nThere is a file: `./.../  /. .the flag.txt`\n\nShow its contents on the screen.\n", "example": "cat ./.../\\ \\ /.\\ .the\\ flag.txt", "expected_failures": ["echo you got it!"], "expected_output": {"lines": ["you got it!"]}}, {"slug": "find_tabs_in_a_file", "openemoji": "1F432", "version": 6, "disp_title": "find tabs in file", "author": "anonymous", "description": "How many lines contain tab characters in the file named `file-with-tabs.txt` in the current directory.\n", "example": "grep -P '\\t' file-with-tabs.txt | wc -l", "expected_failures": ["echo 3"], "expected_output": {"lines": ["3"]}}, {"slug": "remove_files_without_extension", "openemoji": "1F338", "version": 5, "author": "bryfry", "disp_title": "Remove files without extension.", "description": "There are files in this challenge with different file extensions.\n\nRemove all files without the .txt and .exe extensions recursively in the current working directory.\n", "example": "find . -type f -regextype posix-extended ! -regex \".*(\\.txt|\\.exe)$\" -exec rm {} +", "expected_failures": ["echo"]}, {"slug": "remove_files_with_a_dash", "openemoji": "1F339", "version": 5, "author": "anonymous", "disp_title": "Remove files that start with a dash", "description": "There are some files in this directory that start with a dash in the filename.  Remove those files.\n", "example": "rm ./-*", "expected_failures": ["echo"]}, {"slug": "print_sorted_by_key", "openemoji": "1F33A", "version": 5, "author": "verovan", "disp_title": "Print the content sorted by PID", "description": "There are two files in this directory, ps-ef1 and ps-ef2.  Print the contents of both files sorted by PID and delete repeated lines.\n", "example": "cat ps-ef1 > aux; sed '1 d' ps-ef2 >> aux; cat aux | sort -nk2,2 | uniq", "expected_output": {"lines": ["UID        PID  PPID  C STIME TTY          TIME CMD", "root         1     0  0 mar04 ?        00:00:13 /sbin/init", "root         2     0  0 mar04 ?        00:00:00 [kthreadd]", "root         3     2  0 mar04 ?        00:01:07 [ksoftirqd/0]", "user         5     2  0 mar04 ?        00:00:00 [kworker/0:0H]", "user         7     2  0 mar04 ?        00:07:06 [rcu_sched]", "user         8     2  0 mar04 ?        00:00:00 [rcu_bh]", "root         9     2  0 mar04 ?        00:00:00 [migration/0]", "root        10     2  0 mar04 ?        00:00:04 [watchdog/0]", "user        11     2  0 mar04 ?        00:00:04 [watchdog/1]", "root        12     2  0 mar04 ?        00:00:00 [migration/1]", "root        13     2  0 mar04 ?        00:00:59 [ksoftirqd/1]", "user        15     2  0 mar04 ?        00:00:00 [kworker/1:0H]", "user        16     2  0 mar04 ?        00:00:04 [watchdog/2]", "root        17     2  0 mar04 ?        00:00:00 [migration/2]", "root        18     2  0 mar04 ?        00:00:59 [ksoftirqd/2]", "root        20     2  0 mar04 ?        00:00:00 [kworker/2:0H]", "user        21     2  0 mar04 ?        00:00:04 [watchdog/3]", "root        22     2  0 mar04 ?        00:00:00 [migration/3]", "root        23     2  0 mar04 ?        00:01:29 [ksoftirqd/3]"]}}, {"slug": "IPv4_listening_ports", "openemoji": "1F33B", "version": 5, "author": "TaTo69", "disp_title": "print the ports", "description": "In the current directory there is a file called netstat.out.\n\nPrint all the IPv4 listening ports sorted from the higher to lower.\n", "example": "egrep  \"tcp\\ .*:**LISTEN\" netstat.out | awk '{print $4}' | sed -e 's/.*\\://g' | sort -nr", "expected_output": {"lines": ["45922", "9090", "8080", "1723", "1254", "1244", "1234", "111", "80", "22"]}}]