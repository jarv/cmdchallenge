#!/usr/bin/env bash

set -euf -o pipefail

HOST="i.jarv.org"
DEFAULT_ARCH="arm64"

_BRED="\033[1;31m"
_NORM="\033[0m"

usage() {
  cat <<EOF
Usage: $0 [-t] [-a <amd64|arm64>]

  -d : deploy to dev
  -a : architecture (defaults to arm64)

EOF
}

getImgID() {
  local imgID
  imgID=$(docker image ls -q "$1")
  if [[ -z "$imgID" ]]; then
    printf "Image not found for '%s'!\n" "$1" 1>&2
    return 1
  fi
  return 0
}

loadImg() {
  local img="$1"
  local fname="/tmp/${img}.tar"

  printf "Saving %s ... " "$img"
  docker save "$img" > "$fname"
  printf "Transfering ... "
  scp -q "$fname" "$HOST:$fname"
  printf "Loading ...\n"
  # shellcheck disable=SC2029
  ssh $HOST "sudo bootstrap docker_load $fname"
  rm -f "$fname"
}

while getopts "h?da:" opt; do
  case "$opt" in
    h | \?)
      usage
      exit 0
      ;;
    d)
      is_dev=true
      ;;
    a)
      arch=${OPTARG}
      ;;
  esac
done


arch=${arch:-$DEFAULT_ARCH}
imgs=(
  "runcmd:$arch"
  "cmd:$arch"
  "cmd-no-bin:$arch"
)

# Test that images exist
for img in "${imgs[@]}"; do
  if ! getImgID "$img"; then
    printf "Image check failed!" 1>&2
    exit 1
  fi
done

if [[ -z ${is_dev:-} ]]; then
  echo -ne "${_BRED}You are about to deploy to production, press enter to continue.${_NORM}"
  read -rp ""
fi

for img in "${imgs[@]}"; do
  if [[ -n ${is_dev:-} ]]; then
    img_dev="${img}-dev"
    docker tag "$img" "$img_dev"
    loadImg "$img_dev"
    docker image rm "$img_dev" >/dev/null
    continue
  fi
  loadImg "$img"
done

[[ -n ${is_dev:-} ]] && svc="cmd-dev.service" || svc="cmd.service"

# shellcheck disable=SC2029
ssh $HOST "sudo bootstrap restart_service $svc"
