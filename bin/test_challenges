#!/usr/bin/env python

import runcmd_path_append  # noqa: F401
import sys
import yaml
from challenge import verify_result
from docker_cmd import output_from_cmd, DockerValidationError
from colorama import Fore, Style, init
from os.path import dirname, realpath, join
import logging


def main(challenge_name):
    init()
    LOG = logging.getLogger()
    LOG.setLevel(logging.WARN)
    PASS = "\u2713"
    FAIL = "\u2718"

    ret = 0
    dir_path = dirname(realpath(__file__))

    challenges = yaml.safe_load(open(join(dir_path, "..", "challenges.yaml")).read())

    for challenge in challenges:
        if challenge_name and challenge["slug"] != challenge_name:
            continue
        d = challenge["slug"]
        example_cmd = challenge["example"]
        print(f"{Fore.LIGHTBLUE_EX}{d}", end="")
        print(f"\t{Fore.LIGHTBLACK_EX}`{example_cmd}`{Style.RESET_ALL}", end="")
        try:
            result = output_from_cmd(example_cmd, challenge)
            exit_ok = result["CmdExitCode"] == 0
            correct = verify_result(result)
        except DockerValidationError as e:
            ret = 1
            print(f"\t{Fore.LIGHTRED_EX}{FAIL}{Style.RESET_ALL}", end="")
            print(
                f"\t{Fore.LIGHTMAGENTA_EX}DockerValidationError: {e}{Style.RESET_ALL}"
            )
            continue
        # All examples should return an exit code of zero
        if not (exit_ok and correct):
            ret = 1
            print(f"\t{Fore.LIGHTRED_EX}{FAIL}{Style.RESET_ALL}", end="")
            print(
                f"\t{Fore.LIGHTCYAN_EX}Got: {result['CmdOut'].rstrip()}{Fore.LIGHTBLACK_EX}{result}{Style.RESET_ALL}"
            )
            if "TestsOut" in result:
                print(
                    f"\t{Fore.LIGHTMAGENTA_EX}{result['TestsOut']}{Style.RESET_ALL}".rstrip()
                )
            continue

        example_cmd_fail = challenge.get("example_fail", None)
        if example_cmd_fail:
            try:
                # Test should fail
                result_fail = output_from_cmd(example_cmd_fail, challenge)
                correct_fail = verify_result(result_fail)
            except DockerValidationError as e:
                ret = 1
                print(f"\t{Fore.LIGHTRED_EX}{FAIL}{Style.RESET_ALL}", end="")
                print(f"\t{Fore.LIGHTRED_EX}Error: {e}{Style.RESET_ALL}")
                continue
            if correct_fail:
                ret = 1
                print(f"\t{Fore.LIGHTRED_EX}{FAIL}{Style.RESET_ALL}", end="")
                print(
                    f"\t{Fore.LIGHTCYAN_EX}Got a correct answer for an expected failure '{example_cmd_fail}'\t{Fore.LIGHTBLACK_EX}{result_fail}{Style.RESET_ALL}"
                )
                continue
        print(f"\t{Fore.LIGHTGREEN_EX}{PASS}{Style.RESET_ALL}", end="")
        print("\t", end="")
        print("")
    return ret


if __name__ == "__main__":
    challenge = None
    if len(sys.argv) == 2:
        challenge = sys.argv[1]
    try:
        sys.exit(main(challenge))
    except KeyboardInterrupt:
        sys.exit(1)
