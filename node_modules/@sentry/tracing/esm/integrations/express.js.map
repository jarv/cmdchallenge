{"version":3,"file":"express.js","sourceRoot":"","sources":["../../src/integrations/express.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Integration, Transaction } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n// Have to manually set types because we are using package-alias\ntype Method =\n  | 'all'\n  | 'get'\n  | 'post'\n  | 'put'\n  | 'delete'\n  | 'patch'\n  | 'options'\n  | 'head'\n  | 'checkout'\n  | 'copy'\n  | 'lock'\n  | 'merge'\n  | 'mkactivity'\n  | 'mkcol'\n  | 'move'\n  | 'm-search'\n  | 'notify'\n  | 'purge'\n  | 'report'\n  | 'search'\n  | 'subscribe'\n  | 'trace'\n  | 'unlock'\n  | 'unsubscribe';\n\ntype Application = {\n  [method in Method | 'use']: (...args: any) => any;\n};\n\ntype ErrorRequestHandler = (...args: any) => any;\ntype RequestHandler = (...args: any) => any;\ntype NextFunction = (...args: any) => any;\n\ninterface Response {\n  once(name: string, callback: () => void): void;\n}\n\n/**\n * Internal helper for `__sentry_transaction`\n * @hidden\n */\ninterface SentryTracingResponse {\n  __sentry_transaction?: Transaction;\n}\n\n/**\n * Express integration\n *\n * Provides an request and error handler for Express framework\n * as well as tracing capabilities\n */\nexport class Express implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Express';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Express.id;\n\n  /**\n   * Express App instance\n   */\n  private readonly _app?: Application;\n  private readonly _methods?: Method[];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { app?: Application; methods?: Method[] } = {}) {\n    this._app = options.app;\n    this._methods = options.methods;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    if (!this._app) {\n      logger.error('ExpressIntegration is missing an Express instance');\n      return;\n    }\n    instrumentMiddlewares(this._app);\n    routeMiddlewares(this._app, this._methods);\n  }\n}\n\n/**\n * Wraps original middleware function in a tracing call, which stores the info about the call as a span,\n * and finishes it once the middleware is done invoking.\n *\n * Express middlewares have 3 various forms, thus we have to take care of all of them:\n * // sync\n * app.use(function (req, res) { ... })\n * // async\n * app.use(function (req, res, next) { ... })\n * // error handler\n * app.use(function (err, req, res, next) { ... })\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction wrap(fn: Function): RequestHandler | ErrorRequestHandler {\n  const arity = fn.length;\n\n  switch (arity) {\n    case 2: {\n      return function(this: NodeJS.Global, req: Request, res: Response & SentryTracingResponse): any {\n        const transaction = res.__sentry_transaction;\n        addExpressReqToTransaction(transaction, req);\n        if (transaction) {\n          const span = transaction.startChild({\n            description: fn.name,\n            op: 'middleware',\n          });\n          res.once('finish', () => {\n            span.finish();\n          });\n        }\n        // eslint-disable-next-line prefer-rest-params\n        return fn.apply(this, arguments);\n      };\n    }\n    case 3: {\n      return function(\n        this: NodeJS.Global,\n        req: Request,\n        res: Response & SentryTracingResponse,\n        next: NextFunction,\n      ): any {\n        const transaction = res.__sentry_transaction;\n        addExpressReqToTransaction(transaction, req);\n        const span =\n          transaction &&\n          transaction.startChild({\n            description: fn.name,\n            op: 'middleware',\n          });\n        fn.call(this, req, res, function(this: NodeJS.Global): any {\n          if (span) {\n            span.finish();\n          }\n          // eslint-disable-next-line prefer-rest-params\n          return next.apply(this, arguments);\n        });\n      };\n    }\n    case 4: {\n      return function(\n        this: NodeJS.Global,\n        err: any,\n        req: Request,\n        res: Response & SentryTracingResponse,\n        next: NextFunction,\n      ): any {\n        const transaction = res.__sentry_transaction;\n        addExpressReqToTransaction(transaction, req);\n        const span =\n          transaction &&\n          transaction.startChild({\n            description: fn.name,\n            op: 'middleware',\n          });\n        fn.call(this, err, req, res, function(this: NodeJS.Global): any {\n          if (span) {\n            span.finish();\n          }\n          // eslint-disable-next-line prefer-rest-params\n          return next.apply(this, arguments);\n        });\n      };\n    }\n    default: {\n      throw new Error(`Express middleware takes 2-4 arguments. Got: ${arity}`);\n    }\n  }\n}\n\n/**\n * Set parameterized as transaction name e.g.: `GET /users/:id`\n * Also adds more context data on the transaction from the request\n */\nfunction addExpressReqToTransaction(transaction: Transaction | undefined, req: any): void {\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  if (transaction) {\n    if (req.route && req.route.path) {\n      transaction.name = `${req.method} ${req.route.path}`;\n    }\n    transaction.setData('url', req.originalUrl);\n    transaction.setData('baseUrl', req.baseUrl);\n    transaction.setData('query', req.query);\n  }\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n}\n\n/**\n * Takes all the function arguments passed to the original `app.use` call\n * and wraps every function, as well as array of functions with a call to our `wrap` method.\n * We have to take care of the arrays as well as iterate over all of the arguments,\n * as `app.use` can accept middlewares in few various forms.\n *\n * app.use([<path>], <fn>)\n * app.use([<path>], <fn>, ...<fn>)\n * app.use([<path>], ...<fn>[])\n */\nfunction wrapUseArgs(args: IArguments): unknown[] {\n  return Array.from(args).map((arg: unknown) => {\n    if (typeof arg === 'function') {\n      return wrap(arg);\n    }\n\n    if (Array.isArray(arg)) {\n      return arg.map((a: unknown) => {\n        if (typeof a === 'function') {\n          return wrap(a);\n        }\n        return a;\n      });\n    }\n\n    return arg;\n  });\n}\n\n/**\n * Patches original App to utilize our tracing functionality\n */\nfunction patchMiddleware(app: Application, method: Method | 'use'): Application {\n  const originalAppCallback = app[method];\n\n  app[method] = function(): any {\n    // eslint-disable-next-line prefer-rest-params\n    return originalAppCallback.apply(this, wrapUseArgs(arguments));\n  };\n\n  return app;\n}\n\n/**\n * Patches original app.use\n */\nfunction instrumentMiddlewares(app: Application): void {\n  patchMiddleware(app, 'use');\n}\n\n/**\n * Patches original app.METHOD\n */\nfunction routeMiddlewares(app: Application, methods: Method[] = []): void {\n  methods.forEach(function(method: Method) {\n    patchMiddleware(app, method);\n  });\n}\n"]}